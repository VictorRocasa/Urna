/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ifsudestemg.View;

import ifsudestemg.Controller.CandidatoController;
import ifsudestemg.Controller.EleicaoController;
import ifsudestemg.Controller.LegendaController;
import ifsudestemg.Controller.VotoController;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author victorPC
 */
public class ViewVotar extends javax.swing.JFrame {
    private final EleicaoController eleicaoController = new EleicaoController();
    private final CandidatoController candidatoController = new CandidatoController();
    private final LegendaController legendaController = new LegendaController();
    private DefaultTableModel model;
    private javax.swing.JFrame origem;
    VotoController votoController = new VotoController();
    private int idEleicao = 0;
    private int idLegenda = 0;
    private int idEleitor;
    int numeroLegenda;
    
    /**
     * Creates new form ViewVotar
     */
    public ViewVotar(javax.swing.JFrame origem, int idEleitor) {
        initComponents();
        this.btnVoltarPara.setVisible(false);
        this.btnVotoLegenda.setVisible(false);
        this.idEleitor = idEleitor;
        this.origem = origem;
        preencheTabela();
    }
    
    
    public void preencheTabela(){
        if(idEleicao == 0){
            String[] colunas = {"ID","Cargo","Região","Data","Turno"}; 
            model = new DefaultTableModel(colunas,0);
            Object[][] dados;
            try {
                dados = eleicaoController.retornaDados();
                for (Object[] dado : dados) {
                    Object[] linha = {dado[0], dado[1], dado[2], dado[3], dado[4]};
                    model.addRow(linha);
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this,"Erro ao consultar os registros, tente novamente mais tarde!","Erro!", 0);
            } catch (ClassNotFoundException ex) {
               JOptionPane.showMessageDialog(this,"Driver do banco de dados inexistente, comunique o administrador do sistema!","Erro!", 0);
            }
            this.tblInfo.setModel(model);
            this.tblInfo.removeColumn(this.tblInfo.getColumnModel().getColumn(0));
        }
        else{
            if(idLegenda == 0){
                String[] colunas = {"IDL","Numero do Partido","Nome"}; 
                model = new DefaultTableModel(colunas,0);
                Object[][] dados;
                try {
                    dados = legendaController.retornaLegendaEleicao(idEleicao);
                    for (Object[] dado : dados) {
                        Object[] linha = {dado[0], dado[1], dado[2]};
                        model.addRow(linha);
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this,"Erro ao consultar os registros, tente novamente mais tarde!","Erro!", 0);
                } catch (ClassNotFoundException ex) {
                   JOptionPane.showMessageDialog(this,"Driver do banco de dados inexistente, comunique o administrador do sistema!","Erro!", 0);
                }
                this.tblInfo.setModel(model);
                this.tblInfo.removeColumn(this.tblInfo.getColumnModel().getColumn(0));
            }
            else{
                String[] colunas = {"IDC","Nome","Numero"}; 
                model = new DefaultTableModel(colunas,0);
                Object[][] dados;
                try {
                    dados = candidatoController.retornaCandidatosEleicao(idLegenda);
                    for (Object[] dado : dados) {
                        Object[] linha = {dado[0], dado[1], dado[2]};
                        model.addRow(linha);
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this,"Erro ao consultar os registros, tente novamente mais tarde!","Erro!", 0);
                } catch (ClassNotFoundException ex) {
                   JOptionPane.showMessageDialog(this,"Driver do banco de dados inexistente, comunique o administrador do sistema!","Erro!", 0);
                }
                this.tblInfo.setModel(model);
                this.tblInfo.removeColumn(this.tblInfo.getColumnModel().getColumn(0));
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblInfo = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblInfo = new javax.swing.JTable();
        btnVoltar = new javax.swing.JButton();
        btnAvancar = new javax.swing.JButton();
        btnVoltarPara = new javax.swing.JButton();
        btnVotoLegenda = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Urna Online");

        lblInfo.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblInfo.setText("Eleições disponíveis:");

        tblInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblInfo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblInfoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblInfo);

        btnVoltar.setText("Sair da tela de voto");
        btnVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVoltarActionPerformed(evt);
            }
        });

        btnAvancar.setText("Selecionar eleição");
        btnAvancar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAvancarActionPerformed(evt);
            }
        });

        btnVoltarPara.setText("Voltar para eleições");
        btnVoltarPara.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVoltarParaActionPerformed(evt);
            }
        });

        btnVotoLegenda.setText("Votar na legenda");
        btnVotoLegenda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVotoLegendaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(lblInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnVoltar, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnVoltarPara, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnVotoLegenda, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAvancar, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnAvancar, btnVotoLegenda});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblInfo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnVoltar)
                    .addComponent(btnAvancar)
                    .addComponent(btnVoltarPara)
                    .addComponent(btnVotoLegenda))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void tblInfoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblInfoMouseClicked

    }//GEN-LAST:event_tblInfoMouseClicked

    private void btnAvancarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAvancarActionPerformed
        int indice = this.tblInfo.getSelectedRow();
        if(idEleicao == 0){ 
            if(indice !=-1){
                idEleicao = ((int) model.getValueAt(indice, 0));
                this.preencheTabela();
                this.btnVoltarPara.setVisible(true);
                this.btnVotoLegenda.setVisible(true);
                this.lblInfo.setText("Partidos na eleição:");
                this.btnAvancar.setText("Selecionar Partido");
            }
            else{
                JOptionPane.showMessageDialog(this,"Aviso, selecione uma eleição!","Aviso!", 2);
            }
        }
        else if(idLegenda == 0){
            if(indice !=-1){
                idLegenda = ((int) model.getValueAt(indice, 0));
                numeroLegenda = ((int) model.getValueAt(indice, 2));
                this.preencheTabela();
                this.btnVoltarPara.setText("Voitar para partidos");
                this.lblInfo.setText("Candidatos do partido:");
                this.btnAvancar.setText("Votar em candidato");
            }
            else{
                JOptionPane.showMessageDialog(this,"Aviso, selecione um partido!","Aviso!", 2);
            }
        }
        else{
            if(indice !=-1){
            Object[] options = {"Confirmar", "Cancelar"};
            if(JOptionPane.showOptionDialog(this, "Deseja confirmar seu voto no candidato "+model.getValueAt(indice, 1)+" de número "+model.getValueAt(indice, 2)+"?",
                "Aviso", JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null, options, options[1]) == 0){
                try{
                    votoController.gerarVoto(idEleitor, idLegenda, ((int) model.getValueAt(indice, 0)));
                    JOptionPane.showMessageDialog(this,"Voto realizado com sucesso!","Sucesso!", 1);
                    this.btnVoltarActionPerformed(null);
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this,"Erro ao contabilizar seu voto, tente novamente mais tarde!","Erro!", 0);
                } catch (ClassNotFoundException ex) {
                   JOptionPane.showMessageDialog(this,"Driver do banco de dados inexistente, comunique o administrador do sistema!","Erro!", 0);
                }
            }
            }
            else{
                JOptionPane.showMessageDialog(this,"Aviso, selecione uma candiadto!","Aviso!", 2);
            }
        }
    }//GEN-LAST:event_btnAvancarActionPerformed

    private void btnVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVoltarActionPerformed
        this.dispose();
        origem.setVisible(true);
    }//GEN-LAST:event_btnVoltarActionPerformed

    private void btnVotoLegendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVotoLegendaActionPerformed
        if(idLegenda!=0){
            Object[] options = {"Confirmar", "Cancelar"};
            if(JOptionPane.showOptionDialog(this, "Deseja confirmar seu voto na legenda "+this.numeroLegenda+"?",
                "Aviso", JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null, options, options[1]) == 0){
                try{
                    votoController.gerarVoto(idEleitor, idLegenda, 0);
                    JOptionPane.showMessageDialog(this,"Voto realizado com sucesso!","Sucesso!", 1);
                    this.btnVoltarActionPerformed(null);
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this,"Erro ao contabilizar seu voto, tente novamente mais tarde !ex="+ex,"Erro!", 0);
                } catch (ClassNotFoundException ex) {
                   JOptionPane.showMessageDialog(this,"Driver do banco de dados inexistente, comunique o administrador do sistema!","Erro!", 0);
                }
            }
            else{
                JOptionPane.showMessageDialog(this,"Aviso, selecione uma candiadto!","Aviso!", 2);
            }
        }
        else{
            int indice = this.tblInfo.getSelectedRow();
            if(indice !=-1){
                Object[] options = {"Confirmar", "Cancelar"};
                if(JOptionPane.showOptionDialog(this, "Deseja confirmar seu voto na legenda "+((int) model.getValueAt(indice, 2))+"?",
                    "Aviso", JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null, options, options[1]) == 0){
                    try{
                        votoController.gerarVoto(idEleitor, ((int) model.getValueAt(indice, 0)), 0);
                        JOptionPane.showMessageDialog(this,"Voto realizado com sucesso!","Sucesso!", 1);
                        this.btnVoltarActionPerformed(null);
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(this,"Erro ao contabilizar seu voto, tente novamente mais tarde !","Erro!", 0);
                    } catch (ClassNotFoundException ex) {
                       JOptionPane.showMessageDialog(this,"Driver do banco de dados inexistente, comunique o administrador do sistema!","Erro!", 0);
                    }
                }
                else{
                    JOptionPane.showMessageDialog(this,"Aviso, selecione uma candiadto!","Aviso!", 2);
                }
            }
            else{
                JOptionPane.showMessageDialog(this,"Aviso, selecione uma candiadto!","Aviso!", 2);
            }
            
        }
    }//GEN-LAST:event_btnVotoLegendaActionPerformed

    private void btnVoltarParaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVoltarParaActionPerformed
        int indice = this.tblInfo.getSelectedRow();
        if(idLegenda != 0){ 
            idLegenda = 0;
            this.preencheTabela();
            this.lblInfo.setText("Partidos na eleição:");
            this.btnAvancar.setText("Selecionar Partido");
            this.btnVoltarPara.setText("Voitar para eleições");
        }
        else if(idEleicao != 0){
            this.btnAvancar.setText("Selecionar eleição");
            this.btnVoltarPara.setVisible(false);
            this.btnVotoLegenda.setVisible(false);
            idEleicao = 0;
            this.preencheTabela();
        }
    }//GEN-LAST:event_btnVoltarParaActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAvancar;
    private javax.swing.JButton btnVoltar;
    private javax.swing.JButton btnVoltarPara;
    private javax.swing.JButton btnVotoLegenda;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblInfo;
    private javax.swing.JTable tblInfo;
    // End of variables declaration//GEN-END:variables
}
