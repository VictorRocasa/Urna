/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import DAO.EleitorDAO;
import Model.Eleitor;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Calendar;
import javax.swing.JOptionPane;
import javax.swing.text.MaskFormatter;

/**
 *
 * @author victorPC
 */
public class ViewCadastroEleitor extends javax.swing.JFrame {
    private static final ViewCadastroEleitor INSTANCIA = new ViewCadastroEleitor();  
        

    /**
     * Creates new form frCadastroEleitor
     */
    private ViewCadastroEleitor() {
        initComponents();
        
        try{
            MaskFormatter maskNascimento = new MaskFormatter("##/##/####");
            MaskFormatter maskCPF = new MaskFormatter("###.###.###.##");
            MaskFormatter maskTitulo = new MaskFormatter("#############");
            
            maskNascimento.install(this.ftxtNascimento);
            maskCPF.install(this.ftxtCPF);
            maskTitulo.install(this.fxtxTituloEleitor);
        }catch(ParseException ex){
        }
    }
    
    public static ViewCadastroEleitor getInstancia(){
        return INSTANCIA;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblBarra1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lblNome = new javax.swing.JLabel();
        txtNome = new javax.swing.JTextField();
        lblNascimento = new javax.swing.JLabel();
        lblCPF = new javax.swing.JLabel();
        lblTitulo = new javax.swing.JLabel();
        btnVoltar = new javax.swing.JButton();
        btnConfirmar = new javax.swing.JButton();
        ftxtNascimento = new javax.swing.JFormattedTextField();
        ftxtCPF = new javax.swing.JFormattedTextField();
        fxtxTituloEleitor = new javax.swing.JFormattedTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Eleiçao online");

        jLabel1.setText("Cadastro eleitoral:");

        lblNome.setText("Nome completo:");

        lblNascimento.setText("Nascimento:");

        lblCPF.setText("CPF:");

        lblTitulo.setText("Título de eleitor:");

        btnVoltar.setText("Voltar");
        btnVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVoltarActionPerformed(evt);
            }
        });

        btnConfirmar.setText("Confirmar");
        btnConfirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmarActionPerformed(evt);
            }
        });

        ftxtNascimento.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ftxtNascimentoMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout lblBarra1Layout = new javax.swing.GroupLayout(lblBarra1);
        lblBarra1.setLayout(lblBarra1Layout);
        lblBarra1Layout.setHorizontalGroup(
            lblBarra1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lblBarra1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(lblBarra1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fxtxTituloEleitor)
                    .addGroup(lblBarra1Layout.createSequentialGroup()
                        .addComponent(btnVoltar, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnConfirmar, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(ftxtCPF)
                    .addComponent(txtNome)
                    .addGroup(lblBarra1Layout.createSequentialGroup()
                        .addGroup(lblBarra1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(lblNome)
                            .addComponent(lblCPF)
                            .addComponent(lblTitulo)
                            .addComponent(lblNascimento)
                            .addComponent(ftxtNascimento, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        lblBarra1Layout.setVerticalGroup(
            lblBarra1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lblBarra1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblNome)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblNascimento)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ftxtNascimento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblCPF)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ftxtCPF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblTitulo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fxtxTituloEleitor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addGroup(lblBarra1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnVoltar)
                    .addComponent(btnConfirmar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblBarra1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblBarra1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    public boolean validarCPF(String cpf){
        if(cpf.length()!=14)
            return false;
        int dig1=0, dig2=0, calc1=0, calc2=0, aux1=10, aux2=11;
        int [] arrayCPF;
        boolean repetido = true;
        arrayCPF = new int[9];
        dig1 = Integer.parseInt(cpf.substring(12,13));
        dig2 = Integer.parseInt(cpf.substring(13,14));
       
        cpf = cpf.substring(0,3) + cpf.substring(4,7) + cpf.substring(8,11);
        for(int i=0; i<arrayCPF.length; i++){
            arrayCPF[i] = Integer.parseInt(cpf.substring(i, i+1));
            
            calc1 += aux1 * arrayCPF[i];
            aux1--;
            calc2 += aux2 * arrayCPF[i];
            aux2--;
            
            if(arrayCPF[0] != arrayCPF[i] && repetido)
                repetido = false;
        }
        calc2 += dig1 * aux2;
        
        calc1 = (calc1 * 10) % 11;
        calc2 = (calc2 * 10) % 11;
        
        if(calc1 == 10)
            calc1 = 0;
        
        if(calc2 == 10)
            calc2 = 0;
                      
        if(calc1 == dig1 && calc2 == dig2 && !repetido)
            return true;
        else
            return false;
    }
    
    public boolean validarTitulo(String titulo){
        int tamanho = titulo.length();
        if(tamanho < 12 || tamanho > 13)
            return false;
        String esquerda = titulo.substring(0, tamanho-4);
        String direita = titulo.substring(tamanho-4, tamanho);
        int verificadorUF = Integer.parseInt(direita.substring(0, 2));
        if(verificadorUF < 1 || verificadorUF > 28)
            return false;
        int dv1 = 0, fator = 9;
        for(int i = esquerda.length()-1; i >= 0; i--){
            dv1+=(fator*(esquerda.charAt(i)-48));
            fator--;
            if(fator < 2)
                fator = 9;
        }
        dv1 = dv1 % 11;
        if(dv1 == 0)
        {
            if(verificadorUF == 1 || verificadorUF == 2)
                dv1 = 1;
        }
        else if(dv1 > 9)
            dv1 = 0;
        if((direita.charAt(2)-48)!=dv1)
            return false;
        int dv2 = (direita.charAt(0)-48)*7+(direita.charAt(1)-48)*8+dv1*9;
        dv2 = dv2 % 11;
        if(dv2==0){
            if(verificadorUF==1 || verificadorUF==2)
                dv2 = 1;
        }
        else if(dv2 > 9)
                dv2 = 0;
        if((direita.charAt(3)-48)!=dv2)
            return false;
        
        return true;
    }
    
    public boolean verificaData(String data){
        if(data.length()!=10)
            return false;
        String[] partes = data.split("/");  
        Calendar cal = Calendar.getInstance();
        int anoAtual = cal.get(Calendar.YEAR); 
        int ano = Integer.parseInt(partes[2]);
        if(ano < 1900 || ano > anoAtual-16)
            return false;
        int mes = Integer.parseInt(partes[1]);
        if(mes < 1 || mes > 12)
            return false;
        int dia = Integer.parseInt(partes[0]);
        if(dia < 1 || dia > 31)
            return false;
        if(mes == 4 || mes == 6 || mes == 9 || mes == 11)
            if(dia > 30)
                return false;
        if(mes == 2){
            if(dia > 29)
                return false;
            else if(dia == 29 )
                if(!((ano % 400 == 0) || ((ano % 4 == 0) && (ano % 100 != 0))))
                    return false;
        }
        return true;
    }
    
    public boolean validaCampos(){
        String nome = this.txtNome.getText();
        nome = nome.replace(" ", "");
        String nascimento = this.ftxtNascimento.getText();
        nascimento = nascimento.replace(" ", "");
        String cpf = this.ftxtCPF.getText();
        cpf = cpf.replace(" ", "");
        String titulo = this.fxtxTituloEleitor.getText().replace(" ", "");
        if(nome.equals("")){
            JOptionPane.showMessageDialog(null, "O campo nome não deve ficar em branco!","Erro!", 2);
            return false;
        }
        if(nascimento.equals("//") ){
            JOptionPane.showMessageDialog(null, "O campo nascimento não deve ficar em branco!","Erro!", 2);
            return false;
        }
        if(cpf.equals("...")){
            JOptionPane.showMessageDialog(null, "O cpf não deve ficar em branco!","Erro!", 2);
            return false;
        }
        if(titulo.equals("")){
            JOptionPane.showMessageDialog(null, "O titulo não deve ficar em branco!","Erro!!", 2);
            return false;
        }
        
        if(!nome.matches("[A-Za-záàâãéèêíïóôõöúçñÁÀÂÃÉÈÍÏÓÔÕÖÚÇÑ]{3,}")){
            JOptionPane.showMessageDialog(null, "Nome inválido!","Erro!", 2);
            return false;
        }
        if(!verificaData(nascimento)){
            JOptionPane.showMessageDialog(null, "Data de nascimento inválida!","Erro!", 2);
            return false;
        }
        if(!validarCPF(cpf)){
            JOptionPane.showMessageDialog(null, "cpf inválido!","Erro!", 2);
            return false;
        }
        if(!validarTitulo(titulo)){
            JOptionPane.showMessageDialog(null, "Título inválido!","Erro!", 2);
            return false;
        }
        
        return true;
    }
    
    public void limpaCampos(){
        this.ftxtCPF.setText("");
        this.ftxtNascimento.setText("");
        this.fxtxTituloEleitor.setText("");
        this.txtNome.setText("");
    }
    
    private void btnVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVoltarActionPerformed
        this.dispose();
        ViewDebug viewDebug = ViewDebug.getInstancia();
        viewDebug.setVisible(true);
    }//GEN-LAST:event_btnVoltarActionPerformed

    private void btnConfirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmarActionPerformed
        if(!this.validaCampos())
            return;
        Eleitor eleitor = new Eleitor();
        eleitor.setNome(this.txtNome.getText());
        eleitor.setNascimento(this.ftxtNascimento.getText());
        eleitor.setCpf(this.ftxtCPF.getText());
        eleitor.setTituloEleitor(this.fxtxTituloEleitor.getText());
        EleitorDAO eleitorDAO = EleitorDAO.getInstancia();
        ArrayList<Object> eleitores = eleitorDAO.consulta(eleitor, 4);
        if(eleitores==null)
            return;
        if(!eleitores.isEmpty()){
            JOptionPane.showMessageDialog(null,"cpf já cadastrado!.","Erro!", 2);
            return;
        }
        if(eleitorDAO.adiciona(eleitor)){
            JOptionPane.showMessageDialog(null,"Cadastro Realizado com sucesso.","Sucesso!", 1);
            this.limpaCampos();                
        }
    }//GEN-LAST:event_btnConfirmarActionPerformed

    private void ftxtNascimentoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ftxtNascimentoMouseClicked
    }//GEN-LAST:event_ftxtNascimentoMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConfirmar;
    private javax.swing.JButton btnVoltar;
    private javax.swing.JFormattedTextField ftxtCPF;
    private javax.swing.JFormattedTextField ftxtNascimento;
    private javax.swing.JFormattedTextField fxtxTituloEleitor;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel lblBarra1;
    private javax.swing.JLabel lblCPF;
    private javax.swing.JLabel lblNascimento;
    private javax.swing.JLabel lblNome;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JTextField txtNome;
    // End of variables declaration//GEN-END:variables
}
